#+TITLE: fffxj's Emacs configuration
#+AUTHOR: Xiaojie Feng
#+EMAIL: fengxiaojie1997@gmail.com

* Package Manager
** ELPA

Emacs24 之后， Emacs就像其他操作系统一样有了自己的包管理工具，如内置的 [[https://www.emacswiki.org/emacs/ELPA][ELPA(package.el)]]
，[[https://github.com/dimitri/el-get][El-Get]] ，可以使得下载插件非常方便，还能够带着一份配置文件走天下了。

ELPA 具有了自己的 repository，但是它有些保守。因此，我们还要再添加几个的软件源。
如果你没有使用过 package，现在就用它吧。你所要做的只是如下这样：

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)

  (setq package-archives
	'(("gnu" . "https://elpa.gnu.org/packages/")
	  ("org" . "http://orgmode.org/elpa/")
	  ("melpa" . "https://melpa.org/packages/")
	  ("popkit" . "http://elpa.popkit.org/packages/")))

  (package-initialize)
  (setq package-enable-at-startup nil)
#+END_SRC
** Use-package

[[https://github.com/jwiegley/use-package][Use-package]] 也是一个好东西，提供分离配置和提高整洁度的宏，
它还能确保软件包的安装，并提高启动速度。

#+BEGIN_SRC emacs-lisp :tangle yes
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  (setq use-package-verbose t
	use-package-always-ensure t)

  (eval-when-compile
    (require 'use-package))

  (setq load-prefer-newer t)
#+END_SRC
* Basic Settings
** Personal Information

一些关于我的个人信息。

#+BEGIN_SRC emacs-lisp :tangle yes
  (setq user-full-name "Xiaojie Feng"
        user-mail-address "fengxiaojie1997@gmail.com")
#+END_SRC
** Library

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package dash)
#+END_SRC
** Backups

自动备份，这可能是大多数人最想首先更改的一项了吧。
Emacs 会在当前文件夹下自动备份文件，弄得混乱不堪，我选择把它关掉。

#+begin_src emacs-lisp :tangle yes
  (setq make-backup-files nil)
#+end_src   
* Interface Enhancement
** Helm

[[https://github.com/emacs-helm/helm][Helm]] 使得许多事情易于完成，我倾向于用它来取代 ido，为了在尽可能多的地方使用它。

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package helm
    :ensure t
    :init
    (require 'helm-config)
    :bind (
           ("C-c h" . helm-command-prefix)
           ("M-x" . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("C-x b" . helm-buffers-list)
           ("C-c h o" . helm-occur)
           :map helm-map
           ("<tab>" . helm-execute-persistent-action)
           ("C-i" . helm-execute-persistent-action)
           ))
#+END_SRC

进阶学习参考: [[http://tuhdo.github.io/helm-intro.html][A Package in a league of its own: Helm]]

** Undo-tree

Undo-tree 可以将所有的编辑状态用树状结构在一个 buffer 中显示出来。
然后我们轻松地可以找到我们需要的状态，甚至可以 diff 不同的状态。

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package undo-tree
    :ensure t
    :init (global-undo-tree-mode)
    :diminish undo-tree-mode)
#+END_SRC

C-x u 开启 undo-tree-visualizer-mode 后，n p 上下移动，b f 左右切换子树，t 显示时间戳，
d 显示 diff， q 退出。

* Auto Completion
** Hippie-expand

[[https://www.emacswiki.org/emacs/HippieExpand][Hippie-expand]] 自动补全，通过搜寻已输入的单词完成操作，包括查看当前和其他的 buffers，filenames，kill ring...

#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "M-/") 'hippie-expand)
  (setq hippie-expand-try-functions-list
   '(try-expand-dabbrev
     try-expand-dabbrev-all-buffers
     try-expand-dabbrev-from-kill
     try-complete-file-name-partially
     try-complete-file-name
     try-expand-all-abbrevs
     try-expand-list
     try-expand-line
     try-complete-lisp-symbol-partially
     try-complete-lisp-symbol))
#+END_SRC

M-/ 执行补全。

** Yasnippet

[[https://github.com/joaotavora/yasnippet][Yasnippet]] 是一个非常强大的模板补全扩展，键入几个字母就能完成补全，
还能轻松定制自己的模板。

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package yasnippet
      :init
      (yas-global-mode 1)
      :diminish t)
#+END_SRC

使用 <TAB> 完成补全。
** Company

[[https://company-mode.github.io][Company]] 意为 "company anything"，它能满足我绝大部分的补全需要，

#+BEGIN_SRC emacs-lisp :tangle yes
    (use-package company
      :ensure t
      :init
      (add-hook 'after-init-hook 'global-company-mode)
      :diminish company-mode)
#+END_SRC

利用 [[https://github.com/expez/company-quickhelp][company-quickhelp]] ，可以增加适当的延迟。它依赖 [[https://github.com/pitkali/pos-tip/blob/master/pos-tip.el][top-tip]] 。

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package company-quickhelp
    :ensure t
    :config
    (company-quickhelp-mode 1))
#+END_SRC

在键入几个字母后会开启 Company，M-n 和 M-p 选择，<RET> 或 <TAB> 完成补全。
* Programming language
** SML

因华盛顿大学的 Programming Language 使用SML语言教学，而配置。

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package sml-mode)
  (setenv "PATH" (concat "/usr/local/smlnj/bin:" (getenv "PATH")))
  (setq exec-path (cons "/usr/local/smlnj/bin" exec-path))
#+END_SRC
* Appearance
** Color Theme

From: [[http://stackoverflow.com/questions/23793288/cycle-custom-themes-w-emacs-24/23794179#23794179][stackoverflow]]

#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package color-theme)
  (use-package solarized-theme)
  (use-package color-theme-sanityinc-solarized)

  (setq my-themes (list
                   'solarized-light
                   'solarized-dark
                   'sanityinc-solarized-light
                   'sanityinc-solarized-dark))
                   
  (setq curr-theme my-themes)

  (defun my-theme-cycle ()
    (interactive)
    (disable-theme (car curr-theme)) ;;Nee flickeringded to stop even worse
    (setq curr-theme (cdr curr-theme))
    (if (null curr-theme) (setq curr-theme my-themes))
    (load-theme (car curr-theme) t)
    (message "%s" (car curr-theme)))

  (global-set-key [f12] 'my-theme-cycle)
  (setq curr-theme my-themes)
  (load-theme (car curr-theme) t)
#+END_SRC

F12 在 my-themes 列表中快速切换主题。

